{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForSlot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ApprovalValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_oldSlot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newSlot",
          "type": "uint256"
        }
      ],
      "name": "SlotChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferValue",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForSlot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForSlot",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "slotOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "valueDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "16": "/Users/iwan/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/utils/introspection/IERC165.sol",
    "21": "contracts/ERC3525/interfaces/IERC3525.sol",
    "24": "contracts/ERC3525/interfaces/IERC3525SlotApprovable.sol",
    "6": "/Users/iwan/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/token/ERC721/IERC721.sol"
  },
  "ast": {
    "absolutePath": "contracts/ERC3525/interfaces/IERC3525SlotApprovable.sol",
    "exportedSymbols": {
      "IERC165": [
        5969
      ],
      "IERC3525": [
        3885
      ],
      "IERC3525SlotApprovable": [
        4244
      ],
      "IERC721": [
        5593
      ]
    },
    "id": 4245,
    "license": "CC0-1.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4204,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:23:24"
      },
      {
        "absolutePath": "contracts/ERC3525/interfaces/IERC3525.sol",
        "file": "./IERC3525.sol",
        "id": 4205,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4245,
        "sourceUnit": 3886,
        "src": "61:24:24",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4207,
              "name": "IERC3525",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3885,
              "src": "494:8:24"
            },
            "id": 4208,
            "nodeType": "InheritanceSpecifier",
            "src": "494:8:24"
          }
        ],
        "canonicalName": "IERC3525SlotApprovable",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 4206,
          "nodeType": "StructuredDocumentation",
          "src": "87:370:24",
          "text": " @title ERC-3525 Semi-Fungible Token Standard, optional extension for approval of slot level\n @dev Interfaces for any contract that wants to support approval of slot level, which allows an\n  operator to manage one's tokens with the same slot.\n  See https://eips.ethereum.org/EIPS/eip-3525\n Note: the ERC-165 identifier for this interface is 0xb688be58."
        },
        "fullyImplemented": false,
        "id": 4244,
        "linearizedBaseContracts": [
          4244,
          3885,
          5593,
          5969
        ],
        "name": "IERC3525SlotApprovable",
        "nameLocation": "468:22:24",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 4209,
              "nodeType": "StructuredDocumentation",
              "src": "509:436:24",
              "text": " @dev MUST emits when an operator is approved or disapproved to manage all of `_owner`'s\n  tokens with the same slot.\n @param _owner The address whose tokens are approved\n @param _slot The slot to approve, all of `_owner`'s tokens with this slot are approved\n @param _operator The operator being approved or disapproved\n @param _approved Identify if `_operator` is approved or disapproved"
            },
            "eventSelector": "7bdf71e6625aa496095bf08b60c677cf81c963f402cf258981e3bd7507d3480c",
            "id": 4219,
            "name": "ApprovalForSlot",
            "nameLocation": "956:15:24",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4218,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4211,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "997:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 4219,
                  "src": "981:22:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4210,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "981:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4213,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_slot",
                  "nameLocation": "1029:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 4219,
                  "src": "1013:21:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4212,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1013:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4215,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_operator",
                  "nameLocation": "1060:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 4219,
                  "src": "1044:25:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4214,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1044:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4217,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_approved",
                  "nameLocation": "1084:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 4219,
                  "src": "1079:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4216,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1079:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "971:128:24"
            },
            "src": "950:150:24"
          },
          {
            "documentation": {
              "id": 4220,
              "nodeType": "StructuredDocumentation",
              "src": "1106:551:24",
              "text": " @notice Approve or disapprove an operator to manage all of `_owner`'s tokens with the\n  specified slot.\n @dev Caller SHOULD be `_owner` or an operator who has been authorized through\n  `setApprovalForAll`.\n  MUST emit ApprovalSlot event.\n @param _owner The address that owns the ERC3525 tokens\n @param _slot The slot of tokens being queried approval of\n @param _operator The address for whom to query approval\n @param _approved Identify if `_operator` would be approved or disapproved"
            },
            "functionSelector": "55cd4e06",
            "id": 4231,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setApprovalForSlot",
            "nameLocation": "1671:18:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4229,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4222,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "1707:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 4231,
                  "src": "1699:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4221,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1699:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4224,
                  "mutability": "mutable",
                  "name": "_slot",
                  "nameLocation": "1731:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 4231,
                  "src": "1723:13:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4223,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1723:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4226,
                  "mutability": "mutable",
                  "name": "_operator",
                  "nameLocation": "1754:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 4231,
                  "src": "1746:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4225,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1746:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4228,
                  "mutability": "mutable",
                  "name": "_approved",
                  "nameLocation": "1778:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 4231,
                  "src": "1773:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4227,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1773:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1689:104:24"
            },
            "returnParameters": {
              "id": 4230,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1810:0:24"
            },
            "scope": 4244,
            "src": "1662:149:24",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 4232,
              "nodeType": "StructuredDocumentation",
              "src": "1817:442:24",
              "text": " @notice Query if `_operator` is authorized to manage all of `_owner`'s tokens with the\n  specified slot.\n @param _owner The address that owns the ERC3525 tokens\n @param _slot The slot of tokens being queried approval of\n @param _operator The address for whom to query approval\n @return True if `_operator` is authorized to manage all of `_owner`'s tokens with `_slot`,\n  false otherwise."
            },
            "functionSelector": "e345f05e",
            "id": 4243,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isApprovedForSlot",
            "nameLocation": "2273:17:24",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4239,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4234,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "2308:6:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 4243,
                  "src": "2300:14:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4233,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2300:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4236,
                  "mutability": "mutable",
                  "name": "_slot",
                  "nameLocation": "2332:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 4243,
                  "src": "2324:13:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4235,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2324:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4238,
                  "mutability": "mutable",
                  "name": "_operator",
                  "nameLocation": "2355:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 4243,
                  "src": "2347:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4237,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2347:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2290:80:24"
            },
            "returnParameters": {
              "id": 4242,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4241,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4243,
                  "src": "2394:4:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4240,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2394:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2393:6:24"
            },
            "scope": 4244,
            "src": "2264:136:24",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 4245,
        "src": "458:1944:24",
        "usedErrors": []
      }
    ],
    "src": "36:2367:24"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "IERC3525SlotApprovable",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.7.3/IERC165",
    "IERC3525",
    "OpenZeppelin/openzeppelin-contracts@4.7.3/IERC721"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "details": "Interfaces for any contract that wants to support approval of slot level, which allows an  operator to manage one's tokens with the same slot.  See https://eips.ethereum.org/EIPS/eip-3525 Note: the ERC-165 identifier for this interface is 0xb688be58.",
    "events": {
      "ApprovalForSlot(address,uint256,address,bool)": {
        "details": "MUST emits when an operator is approved or disapproved to manage all of `_owner`'s  tokens with the same slot.",
        "params": {
          "_approved": "Identify if `_operator` is approved or disapproved",
          "_operator": "The operator being approved or disapproved",
          "_owner": "The address whose tokens are approved",
          "_slot": "The slot to approve, all of `_owner`'s tokens with this slot are approved"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(uint256,address)": {
        "notice": "Get the maximum value of a token that an operator is allowed to manage.",
        "params": {
          "_operator": "The address of an operator",
          "_tokenId": "The token for which to query the allowance"
        },
        "returns": {
          "_0": "The current approval value of `_tokenId` that `_operator` is allowed to manage"
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "approve(uint256,address,uint256)": {
        "details": "MUST revert unless caller is the current owner, an authorized operator, or the approved  address for `_tokenId`.  MUST emit ApprovalValue event.",
        "notice": "Allow an operator to manage the value of a token, up to the `_value` amount.",
        "params": {
          "_operator": "The operator to be approved",
          "_tokenId": "The token to approve",
          "_value": "The maximum value of `_toTokenId` that `_operator` is allowed to manage"
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "balanceOf(uint256)": {
        "notice": "Get the value of a token.",
        "params": {
          "_tokenId": "The token for which to query the balance"
        },
        "returns": {
          "_0": "The value of `_tokenId`"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "isApprovedForSlot(address,uint256,address)": {
        "notice": "Query if `_operator` is authorized to manage all of `_owner`'s tokens with the  specified slot.",
        "params": {
          "_operator": "The address for whom to query approval",
          "_owner": "The address that owns the ERC3525 tokens",
          "_slot": "The slot of tokens being queried approval of"
        },
        "returns": {
          "_0": "True if `_operator` is authorized to manage all of `_owner`'s tokens with `_slot`,  false otherwise."
        }
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "setApprovalForSlot(address,uint256,address,bool)": {
        "details": "Caller SHOULD be `_owner` or an operator who has been authorized through  `setApprovalForAll`.  MUST emit ApprovalSlot event.",
        "notice": "Approve or disapprove an operator to manage all of `_owner`'s tokens with the  specified slot.",
        "params": {
          "_approved": "Identify if `_operator` would be approved or disapproved",
          "_operator": "The address for whom to query approval",
          "_owner": "The address that owns the ERC3525 tokens",
          "_slot": "The slot of tokens being queried approval of"
        }
      },
      "slotOf(uint256)": {
        "notice": "Get the slot of a token.",
        "params": {
          "_tokenId": "The identifier for a token"
        },
        "returns": {
          "_0": "The slot of the token"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferFrom(uint256,uint256,uint256)": {
        "details": "Caller MUST be the current owner, an authorized operator or an operator who has been  approved the whole `_fromTokenId` or part of it.  MUST revert if `_fromTokenId` or `_toTokenId` is zero token id or does not exist.  MUST revert if slots of `_fromTokenId` and `_toTokenId` do not match.  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the  operator.  MUST emit `TransferValue` event.",
        "notice": "Transfer value from a specified token to another specified token with the same slot.",
        "params": {
          "_fromTokenId": "The token to transfer value from",
          "_toTokenId": "The token to transfer value to",
          "_value": "The transferred value"
        }
      },
      "valueDecimals()": {
        "notice": "Get the number of decimals the token uses for value - e.g. 6, means the user  representation of the value of a token can be calculated by dividing it by 1,000,000.  Considering the compatibility with third-party wallets, this function is defined as  `valueDecimals()` instead of `decimals()` to avoid conflict with ERC20 tokens.",
        "returns": {
          "_0": "The number of decimals for value"
        }
      }
    },
    "title": "ERC-3525 Semi-Fungible Token Standard, optional extension for approval of slot level",
    "version": 1
  },
  "offset": [
    458,
    2402
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "52af241ed7eda961b349bdb5b78d6da34893853c",
  "source": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\nimport \"./IERC3525.sol\";\n\n/**\n * @title ERC-3525 Semi-Fungible Token Standard, optional extension for approval of slot level\n * @dev Interfaces for any contract that wants to support approval of slot level, which allows an\n *  operator to manage one's tokens with the same slot.\n *  See https://eips.ethereum.org/EIPS/eip-3525\n * Note: the ERC-165 identifier for this interface is 0xb688be58.\n */\ninterface IERC3525SlotApprovable is IERC3525 {\n    /**\n     * @dev MUST emits when an operator is approved or disapproved to manage all of `_owner`'s\n     *  tokens with the same slot.\n     * @param _owner The address whose tokens are approved\n     * @param _slot The slot to approve, all of `_owner`'s tokens with this slot are approved\n     * @param _operator The operator being approved or disapproved\n     * @param _approved Identify if `_operator` is approved or disapproved\n     */\n    event ApprovalForSlot(\n        address indexed _owner,\n        uint256 indexed _slot,\n        address indexed _operator,\n        bool _approved\n    );\n\n    /**\n     * @notice Approve or disapprove an operator to manage all of `_owner`'s tokens with the\n     *  specified slot.\n     * @dev Caller SHOULD be `_owner` or an operator who has been authorized through\n     *  `setApprovalForAll`.\n     *  MUST emit ApprovalSlot event.\n     * @param _owner The address that owns the ERC3525 tokens\n     * @param _slot The slot of tokens being queried approval of\n     * @param _operator The address for whom to query approval\n     * @param _approved Identify if `_operator` would be approved or disapproved\n     */\n    function setApprovalForSlot(\n        address _owner,\n        uint256 _slot,\n        address _operator,\n        bool _approved\n    ) external payable;\n\n    /**\n     * @notice Query if `_operator` is authorized to manage all of `_owner`'s tokens with the\n     *  specified slot.\n     * @param _owner The address that owns the ERC3525 tokens\n     * @param _slot The slot of tokens being queried approval of\n     * @param _operator The address for whom to query approval\n     * @return True if `_operator` is authorized to manage all of `_owner`'s tokens with `_slot`,\n     *  false otherwise.\n     */\n    function isApprovedForSlot(\n        address _owner,\n        uint256 _slot,\n        address _operator\n    ) external view returns (bool);\n}\n",
  "sourceMap": "",
  "sourcePath": "contracts/ERC3525/interfaces/IERC3525SlotApprovable.sol",
  "type": "interface"
}