package com.isotop.demo.service.impl;


import com.alibaba.fastjson.JSONObject;
import com.isotop.demo.config.constant.ApiConstant;
import com.isotop.demo.service.IDemoService;
import com.isotop.demo.utils.HttpClientUtil;
import com.isotop.demo.utils.OpenApiUtils;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import org.web3j.abi.DefaultFunctionEncoder;
import org.web3j.abi.DefaultFunctionReturnDecoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;

import java.util.*;

/**
 * <p>
 * CustomerAssets服务类
 * </p>
 *
 * @author Nathan
 * @since 2023-03-16
 */
@Service
@Slf4j
public class DemoServiceImpl implements IDemoService {
    @Override
    public String getDetails() {
        String result = null;
        Map<String, String> params = new HashMap<>();
        //具体查看对应链的文档 文昌测试12231 文昌正式1223  数图测试 1 数图正式1029
        params.put("chainid", "12231");
        params.put("tokenId", "1");
        params.put("contract", "0x207cd254d7a91129bf12eac251ca356061c8b642");
        //头部
        Map<String, String> headerMap = OpenApiUtils.makeHeaders(params);
        String getResult = OpenApiUtils.getRequest(ApiConstant.QUERYASSET, headerMap, params);
        log.info("--详情{}", getResult);
        /**
         * 结果例子如下
         * {"success":true,"code":"0","data":"https://s3.cn-north-1.amazonaws.com.cn/file.isotop.top/20230802/json/NFT002.json"}
         */
        JSONObject jsonObjectErrcode = JSONObject.parseObject(getResult);
        // 状态码，0成功，其他失败
        if (Objects.nonNull(jsonObjectErrcode) && jsonObjectErrcode.containsKey("code")
                && "0".equals(jsonObjectErrcode.getString("code"))) {
            String dataAsset = jsonObjectErrcode.getString("data");
            //{"success":true,"code":"0","data":"data:application/json;base64,"}
            if (dataAsset.contains("http")) {
                //url的方式
                String resultUrl = HttpClientUtil.doGet(dataAsset);
                JSONObject jsonObjectUrl = JSONObject.parseObject(resultUrl);
                jsonObjectUrl.getString("name");
                result = resultUrl;
            } else if (dataAsset.contains("base64")) {
                /**
                 * base64的方式
                 */
                String base64String = OpenApiUtils.base64(dataAsset);
                result = base64String;
            }

        }
        return result;
    }

    @Override
    public String queryDetails() {
        String result = null;

        Map<String, String> params = new HashMap<>();
        Uint256 tokenId = new Uint256(Integer.valueOf("1"));
        /**
         * 参考abi.例如
         *
         [方法readCall] tokenURI:
         [入参uint256] tokenId:
         [出参string] :
         *
         *
         * 解释分析:
         *  调用api为readCall
         * 	方法名字为 tokenURI
         * 	入参一个tokenId,类型为uint256
         * 	返回一个string类型字符
         *
         */
        Function uriParm = new Function(
                "tokenURI",
                Arrays.asList(tokenId),
                Collections.emptyList()
        );
        String abiEncodedDatauri = DefaultFunctionEncoder.encode(uriParm);
        //链的id ,具体查看对应链的文档 文昌测试12231 文昌正式1223  数图测试 1 数图正式1029
        params.put("chainid", "12231");
        //编码后的数据
        params.put("data", abiEncodedDatauri);
        //会员手机号
        params.put("id", "18518517787");
        //合约地址
        params.put("contract", "0xc87b56dd0000000000000000000000000000000000000000000000000000000000000002");
        //头部
        Map<String, String> headerMap = OpenApiUtils.makeHeaders(params);
        String postResult = OpenApiUtils.getRequest(ApiConstant.READCALL, headerMap, params);
        log.info("--uri的基本详情{}", postResult);
        JSONObject jsonObjectErrcode = JSONObject.parseObject(postResult);
        // 状态码，0成功，其他失败
        if (Objects.nonNull(jsonObjectErrcode) && jsonObjectErrcode.containsKey("code")
                && "0".equals(jsonObjectErrcode.getString("code"))) {
            String data = jsonObjectErrcode.getString("data");
            //返回结果例子.需要先解码
            //{"success":true,"code":"0","data":"0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000269646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c65794a755957316c496a6f674975576b6a2b615870655751672b65546e4f57746f2b5747737557566969416a4d69497349434a6b5a584e6a636d6c7764476c766269493649434c6e6c712f6e69344c6c70492f6d6c36587676497a6c6872446e694c336b7549446b7549766a674949694c434169615731685a3255694f6941696148523063484d364c79397a4d79356a6269317562334a30614330784c6d467459587076626d46336379356a62323075593234765a6d6c735a5335706332393062334175644739774c7a49774d6a4d774f4441794c7a45324f5441354e5449334d44417a4e444a664d5463324c6e42755a79497349434a6b5a584e705a32356c6369493649434a7063323930623341756447397749697767496d463064484a70596e56305a584d694f69426265794a30636d4670644639306558426c496a6f6749756d6268755734677557467065576375755334752b656c71434973496e5a686248566c496a6f674975573373756167754f6d5567434a394c48736964484a686158526664486c775a53493649434c6c6b49506e6b357a6d6a4a486d694a67694c434a32595778315a53493649434c6c74374c6d6f4c6a706c49416966537837496e527959576c3058335235634755694f694169355a476f364c363535346947355a4f4249697769646d4673645755694f6941693562657935714334365a5341496e307365794a30636d4670644639306558426c496a6f674975614a6b2b574e6f6565566d65572f74534973496e5a686248566c496a6f674975573373756167754f6d5567434a395858303d0000000000000000000000000000000000000000000000"}
            //看abi返回结果是string,需要string类型解码(Utf8String 为web3j的jar包属性,不可为java的String)
            TypeReference stringTypeReference = TypeReference.create(Utf8String.class);
            List<Type> list = DefaultFunctionReturnDecoder.decode(data, Arrays.asList(stringTypeReference));
            String dataAsset = String.valueOf(list.get(0).getValue());
            log.info("解码后的数据=={}", dataAsset);
            if (StringUtils.isNotBlank(dataAsset)) {
                if (dataAsset.contains("http")) {
                    //url的方式
                    String resultUrl = HttpClientUtil.doGet(dataAsset);
                    JSONObject jsonObjectUrl = JSONObject.parseObject(resultUrl);
                    jsonObjectUrl.getString("name");
                    result = resultUrl;
                } else if (dataAsset.contains("base64")) {
                    /**
                     * 案例如下:
                     data:application/json;base64,eyJuYW1lIjogIuWkj+aXpeWQg+eTnOWto+WGsuWViiAjMiIsICJkZXNjcmlwdGlvbiI6ICLnlq/ni4LlpI/ml6XvvIzlhrDniL3kuIDkuIvjgIIiLCAiaW1hZ2UiOiAiaHR0cHM6Ly9zMy5jbi1ub3J0aC0xLmFtYXpvbmF3cy5jb20uY24vZmlsZS5pc290b3AudG9wLzIwMjMwODAyLzE2OTA5NTI3MDAzNDJfMTc2LnBuZyIsICJkZXNpZ25lciI6ICJpc290b3AudG9wIiwgImF0dHJpYnV0ZXMiOiBbeyJ0cmFpdF90eXBlIjogIumbhuW4guWFpeWcuuS4u+elqCIsInZhbHVlIjogIuW3suaguOmUgCJ9LHsidHJhaXRfdHlwZSI6ICLlkIPnk5zmjJHmiJgiLCJ2YWx1ZSI6ICLlt7LmoLjplIAifSx7InRyYWl0X3R5cGUiOiAi5ZGo6L6554iG5ZOBIiwidmFsdWUiOiAi5bey5qC46ZSAIn0seyJ0cmFpdF90eXBlIjogIuaJk+WNoeeVmeW/tSIsInZhbHVlIjogIuW3suaguOmUgCJ9XX0=
                     * base64的方式,解析后如下
                     * {"name": "夏日吃瓜季冲啊 #2", "description": "疯狂夏日，冰爽一下。", "image": "https://s3.cn-north-1.amazonaws.com.cn/file.isotop.top/20230802/1690952700342_176.png", "designer": "isotop.top", "attributes": [{"trait_type": "集市入场主票","value": "已核销"},{"trait_type": "吃瓜挑战","value": "已核销"},{"trait_type": "周边爆品","value": "已核销"},{"trait_type": "打卡留念","value": "已核销"}]}
                     */
                    String base64String = OpenApiUtils.base64(dataAsset);
                    result = base64String;
                }
            }
        }
        return result;
    }
}