[合约]SBT: SoulBontToken 灵魂绑定token合约
[获取方法]DID持有人可以调用->createSBT创建自己的SBT 
[描述]SBT有很多特点，不能销毁（除非被发行人），不能转卖，可溯源（发行方认证），可以作为一种社会信用的身份
使用时需要设定DID专属的key：'[CONFIG]XXX.baseURI'为一个metadata的目录
	[方法readCall] Details: SBT可以设置一个详情页作为说明
		[出参string] : 
	[备注] 
	[方法writeCall] burn: 销毁
		[入参uint256] tokenId: 
	[备注] 只能是管理员销毁
	[方法writeCall] init: 初始化
		[入参address] _did: DID合约的地址
		[入参string] _did_name: DID名称
		[入参string] _sbt_name: 创建的SBT名字
		[入参bool] _restrict: 是否是一个严格SBT，严格SBT一旦发行，不能转给任何地址
	[备注] 非严格的SBT可以在DID的名下地址转移
	[方法readCall] issuer_did: 发行方的DID名称
		[出参string] : 
	[备注] 
	[方法writeCall] mint: 铸造一个SBT
		[入参string] to: 接收人的DID名称
		[入参uint256] tokenId: 可以自己定义编号，比如对方的手机号
	[备注] 编号不能重复，需要自己管理
	[方法writeCall] mint: 铸造一个SBT
		[入参address] to: 接收人的地址
		[入参uint256] tokenId: 可以自己定义编号，比如对方的手机号
	[备注] 
	[方法readCall] name: SBT名字
		[出参string] : 
	[备注] 
	[方法readCall] owner: 管理员地址
		[出参address] : 
	[备注] 
	[方法readCall] ownerOf: SBT拥有人的地址
		[入参uint256] tokenId: 编号
		[出参address] : 
	[备注] 
	[方法writeCall] safeTransferFrom: 转移SBT
		[入参address] from: 
		[入参address] to: 
		[入参uint256] tokenId: 
	[备注] 非严格SBT只能在自己的DID用户地址之内转移，严格SBT无法转移
	[方法writeCall] safeTransferFrom: 转移SBT
		[入参address] from: 
		[入参address] to: 
		[入参uint256] tokenId: 
		[入参bytes] data: 
	[备注] 
	[方法readCall] sbt_name: 获取SBT创建的名字
		[出参string] : 
	[备注] 
	[方法writeCall] setApprovalForAll: 
		[入参address] operator: 
		[入参bool] approved: 
	[备注] 
	[方法writeCall] setDetailsURI: 
		[入参string] : 
	[备注] 
	[方法readCall] supportsInterface: 
		[入参bytes4] interfaceId: 
		[出参bool] : 
	[备注] 
	[方法readCall] symbol: 
		[出参string] : 
	[备注] 
	[方法readCall] tokenByIndex: 
		[入参uint256] index: 
		[出参uint256] : 
	[备注] 
	[方法readCall] tokenOfOwnerByIndex: 
		[入参address] owner: 
		[入参uint256] index: 
		[出参uint256] : 
	[备注] 
	[方法readCall] tokenURI: 
		[入参uint256] tokenId: 
		[出参string] : 
	[备注] 
	[方法readCall] totalSupply: 
		[出参uint256] : 
	[备注] 
	[方法writeCall] transferFrom: 转移SBT
		[入参address] from: 
		[入参address] to: 
		[入参uint256] tokenId: 
	[备注] 
	[方法writeCall] transferOwnership: 
		[入参address] _owner: 
	[备注] 
[代码示例]
    did = DID.deploy(addr(admin))
    sbt = SBT.deploy(did, addr(admin))
    did.setSBTTemplate(sbt, addr(admin))
    did.create(D, consumer, time.time()+10000, addr(admin))
    did.put(D, '[CONFIG]nft.cover', D+'.Cover', addr(consumer))
    nft = DIDNFT.at(did.getDIDNFTAddress())
    did.addAddress(D, iwan, addr(consumer))
    did.createSBT(D, 'certification', addr(consumer))
    sbt1 = SBT.at(did.getSBT(D, 'certification'))
    did.put(D, '[CONFIG]certification.baseURI',
            'http://URL/', addr(consumer))

    sbtii = SBTII.deploy(did, addr(admin))
    did.setSBTTemplate(sbtii, addr(admin))

    did.createSBT(D, 'nana', addr(consumer))
    sbt2 = SBT.at(did.getSBT(D, 'nana'))
    did.put(D, '[CONFIG]nana.baseURI', 'http://Image', addr(consumer))

    did.create('iwan.id', iwan, time.time()+10000, addr(admin))
    did.put('iwan.id', '[CONFIG]nft.cover', 'Iwan.Cover', addr(iwan))
    did.addAddress('iwan.id', newbie, addr(iwan))
    did.create('creator.id', creator, time.time()+10000, addr(admin))
    did.put('creator.id', '[CONFIG]nft.cover', 'Creator.Cover', addr(creator))